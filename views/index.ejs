<!doctype html>

<html lang="en">
<head>
  <meta charset="utf-8">

  <title>Intro to WebRTC</title>
  <meta name="description" content="intro to webrtc">
  <link rel="stylesheet" type="text/css" href="styles.css">

</head>

<body>
  <div>
    Video: <select id="camera"></select>
  </div>
  <div>
    Audio: <select id="audio"></select>
  </div>
  <div>
    <button id="takeProfilePicture" type="button" autofocus="true">Create Profile Picture</button>
  </div>
  <video id="videoTag" autoplay></video>
  <canvas id="profilePicCanvas" style="display: none;"></canvas>
  <div>
    <img id="profilePictureOutput" />
  </div>
  <script>
    
    var videoArea = document.querySelector("video");
    var videoSelect = document.querySelector("#camera");
    var audioSelect = document.querySelector("#audio");
    var profilePicCanvas = document.querySelector("#profilePicCanvas");
    var profilePictureOutput = document.querySelector("#profilePictureOutput");
    var takePicButton = document.querySelector("#takeProfilePicture");
    var videoTag = document.querySelector("#videoTag");

    var width = 240;
    var heigt = 0;
    var streaming = false;

    takePicButton.addEventListener('click', function(evt) {
      takepicture();
    }, false);

    videoSelect.onchange = startStream;
    getCameras();
    startStream();

    videoTag.addEventListener('canplay', function(ev){
      if (!streaming) {
        height = videoTag.videoHeight / (videoTag.videoWidth/width);
        
          // Firefox currently has a bug where the height can't be read from
          // the video, so we will make assumptions if this happens.

          if (isNaN(height)) {
            height = width / (4/3);
          }
        
          videoTag.setAttribute('width', width);
          videoTag.setAttribute('height', height);
          profilePicCanvas.setAttribute('width', width);
          profilePicCanvas.setAttribute('height', height);
          streaming = true;
      }
    }, false);
      
    function clearphoto() {
      var context = profilePicCanvas.getContext('2d');
      context.fillStyle = "#AAA";
      context.fillRect(0, 0, profilePicCanvas.width, profilePicCanvas.height);

      var data = profilePicCanvas.toDataURL('image/png');
      profilePictureOutput.setAttribute('src', data);
    }

    function takepicture() {
      var context = profilePicCanvas.getContext('2d');
      if (width && height) {
        profilePicCanvas.width = width;
        profilePicCanvas.height = height;
        context.drawImage(videoTag, 0, 0, width, height);
      
        var data = profilePicCanvas.toDataURL('image/png');
        profilePictureOutput.setAttribute('src', data);
      } else {
        clearphoto();
      }
    }
  
    function getCameras() {
      navigator.mediaDevices.enumerateDevices()
        .then(function (devices) {
            devices.forEach(function (device) {
                var option = document.createElement('option');
                option.value = device.deviceId;
                if (device.kind === 'videoinput') {
                    option.text = device.label || 'camera' + (videoSelect.length + 1);
                    videoSelect.appendChild(option);
                } else if (device.kind == 'audioinput') {
                    option.text = device.label || 'mic' + (audioSelect.length + 1);
                    audioSelect.appendChild(option);
                }
            });
        })
        .catch(function (err) {
            console.log(err.name + ": " + err.message);
        });
    }

    function startStream() {
      navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
      var videoSource = videoSelect.value;
      var constraints = {
        audio: true,
        video: {
          mandatory: {
            maxWidth: 240,
            maxHeight: 240,
          },
          optional: [{
            sourceId: videoSource
          }]
        },

      };
      navigator.getUserMedia(constraints, onSuccess, onError);

    }

    
    function onSuccess(stream) {
      console.log("success we are streaming now");
      console.log('window', window.URL);
      // videoArea.src = window.URL.createObjectURL(stream);
      videoArea.srcObject = stream;
      videoArea.className = "grayscale_filter";
      videoArea.play();
    }

    function onError(error) {
      console.log("Error on getting usermedia: ", error);
    }


  </script>
</body>
</html>